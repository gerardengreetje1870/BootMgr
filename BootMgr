#! /bin/bash
#
# script name: BootMgr
# autor: Sylvain Girod ( uubu at gmx dot fr )
# version: 0.04
# description: script for generate a simple Grub2 cfg on UEFI system
#               Including:
#                   users password
#                   Windows dual boot
#                   Module signature
#                   custom theme color and background
# Warning: only tested on Fedora!
#
# Functions:
# Next_Id: ensure each entry have a new, unique id
# Set_Kernels: Get Kernel list and update grub.cfg
# Get_OS: get linux distrib name
# Set_Root_User: Set Root password
# Set_User: Set User password

### TODO ###
# la locale
# on reprend les images qui fonctionnent, on essaiera manuellement de les modifier:
# for i in $(ls); do convert $i -colorspace srgb -fuzz 20% -fill "rgb(255,0,0)" -opaque 'rgb(116,123,209)' $i; done
# for i in $(ls); do convert $i -colorspace srgba -fuzz 20% -fill "srgba(255,0,0)" -opaque 'srgba(116,123,209)' $i; done

# Function: Next_Id
# Description: ensure each entry have a new, unique id
# Args:
#   $1: CurID
# on conserve le awk:
#     awk -i inplace -v ID=$(( $2 + 1 )) 'NR==1,/%%ID%%/{sub(/%%ID%%/, ID)} 1' /tmp/grub.cfg.tmp
function Next_Id() {
    echo $(($1 + 1))
}

# Function: Set_Kernels
# Description: Get Kernel list and update grub.cfg
# Args:
#   $1: grub.cfg path
function Set_Kernels() {
    KLAST=""
    KPREV=""
    KRESCUE=""
    
    for KERNEL in $(ls -1tc /boot/vmlinuz-* | grep -v rescue | grep -v ".sig" | head -3); do
        [ "$KLAST" ] && [ ! "$KPREV" ] && KPREV=$(basename $KERNEL)
        [ "$KLAST" ] || KLAST=$(basename $KERNEL)
    done
    
    KRESCUE=$(basename $(ls -1tc /boot/vmlinuz-* | grep rescue | grep -v ".sig"))
    sed -i -e "s/%%KLAST%%/${KLAST#vmlinuz-}/g" $1
    sed -i -e "s/%%KPREV%%/${KPREV#vmlinuz-}/g" $1
    sed -i -e "s/%%KRESCUE%%/${KRESCUE#vmlinuz-}/g" $1
}

# Funtion: Get_OS
# Description: get linux distrib name
# Args: None
function Get_OS() {
    [ -r /etc/ubuntu-release ] && OS=ubuntu
    [ -r /etc/debian-release ] && OS=debian
    [ -r /etc/centos-release ] && OS=centos
    [ -r /etc/fedora-release ] && OS=fedora
    echo $OS
}

# Function: Set_OS
# Description: get linux distrib name
# Args:
#   $1: grub.cfg path
function Set_OS() {
    OS=$(Get_OS)
    sed -i "s/%%OS%%/$OS/g" $1
}

# Function: Set_Root_User
# Description: Set Root password
# Args:
#   $1: grub.cfg path
function Set_Root_User() {
    if [ ! "$BOOTMGR_ROOTUSR" ]; then
        echo "Enter password for Root user, 2 times:"
        BOOTMGR_ROOTUSR=$(grub2-mkpasswd-pbkdf2 -l 512 -s 2048 -c 2048)
        BOOTMGR_ROOTUSR=${BOOTMGR_ROOTUSR##* }
        BOOTMGR_ROOTUSR="password_pbkdf2 root $BOOTMGR_ROOTUSR"
    fi
    sed -i "s/%%ROOTUSR%%/$BOOTMGR_ROOTUSR/g" $1
    sed -i -e "s/^BOOTMGR_ROOTUSR=*$/BOOTMGR_ROOTUSR=\"$BOOTMGR_ROOTUSR\"/" /etc/BootMgr/BootMgr_.conf
}

# Function: Set_User
# Description: Set User password
# Args:
#   $1: grub.cfg path
function Set_User() {
    if [ ! "$BOOTMGR_SUPERUSER" ]; then
        echo "Enter UserName"; read NEWUSER;
        echo "Enter password for $NEWUSER user, 2 times:"
        BOOTMGR_SUPERUSER=$(grub2-mkpasswd-pbkdf2 -l 512 -s 2048 -c 2048)
        BOOTMGR_SUPERUSER=${BOOTMGR_SUPERUSER##* }
        BOOTMGR_SUPERUSER="password_pbkdf2 $NEWUSER $BOOTMGR_SUPERUSER"
    fi
    sed -i "s/%%USER%%/$BOOTMGR_SUPERUSER/g" $1
    sed -i -e "s/^BOOTMGR_SUPERUSER=*$/BOOTMGR_SUPERUSER=\"$BOOTMGR_SUPERUSER\"/" /etc/BootMgr/BootMgr_.conf
    sed -i -e "s/%%WITHUSER%%/$NEWUSER/g" $1
}

function Is_Installed() {
 OK=1
 [ -d /etc/BootMgr ] || OK=0
 echo $OK
}

function Install_BootMgr() {
 [ -d /etc/BootMgr ] || mkdir /etc/BootMgr
 [ -r /etc/BootMgr/BootMgr_.conf ] || cp BootMgr_.conf /etc/BootMgr/
 [ -r /etc/BootMgr/grub.template ] || cp grub.template /etc/BootMgr/
 [ -d /etc/BootMgr/themes ] || cp -r themes /etc/BootMgr/
 [ -d /boot/efi/EFI/$(Get_OS)/themes ] || mkdir /boot/efi/EFI/$(Get_OS)/themes
 [ -d /boot/efi/EFI/$(Get_OS)/themes/BootMgr ] || mkdir /boot/efi/EFI/$(Get_OS)/themes/BootMgr
 [ -d /etc/BootMgr/icons ] || cp -r icons /etc/BootMgr
 [ -d /etc/BootMgr/security ] || cp -r security /etc/BootMgr
 cp fonts/* /boot/efi/EFI/$(Get_OS)/fonts/
}

### We only run as root ###
if [  "$(id -u)" != "0" ]; then
    echo "this script must be run as root!"
    exit -1
fi

### Checking if installed ###
if [ "$(Is_Installed)" == "0" ]; then
    echo "BootMgr seem not installed, do you want to install it [y/N]?"; read ANSWER
    if [ "${ANSWER^^}" == "Y" ]; then
        Install_BootMgr
    else
        exit -1
    fi
fi

### Windows Root ID ###
function Get_Win_BootId() {
    for disk in $(ls /dev/disk/by-path/ ); do
        EFIPART=$(blkid /dev/disk/by-path/$disk | grep "EFI system partition")
        [ "$EFIPART" ] && break
    done
    if [ "$EFIPART" ]; then
        EFIPART=${EFIPART##* UUID=}; EFIPART=${EFIPART%% TYPE=*}
        echo $EFIPART
    fi
}

echo "test de dir $@"
### Copying templates ###
[ -r /tmp/grub.cfg.tmp ] && rm /tmp/grub.cfg.tmp
cp /etc/BootMgr/grub.template /tmp/grub.cfg.tmp

### Starting changes:
. /etc/BootMgr/BootMgr_.conf

### Setting current OS (for icons):
Set_OS /tmp/grub.cfg.tmp

### Setting Users Passwords:
Set_Root_User /tmp/grub.cfg.tmp
Set_User /tmp/grub.cfg.tmp

Set_Kernels /tmp/grub.cfg.tmp

### Root part ###:
GRUBPART=$(mount -l | grep "/boot "); GRUBPART=${GRUBPART%% *}
GRUBUUID=$(lsblk -o uuid $GRUBPART | tail -1)

sed -i -e "s/%%UUIDROOT%%/$GRUBUUID/g" /tmp/grub.cfg.tmp

### Linux Root HD ###
ROOTPART=$(mount -l | grep "/ "); ROOTPART=${ROOTPART%% *}
sed -i -e "s|%%HDROOT%%|$ROOTPART|g" /tmp/grub.cfg.tmp

### Linux Options ###
CURRENTCMDLINE=$(cat /proc/cmdline); CURRENTCMDLINE=${CURRENTCMDLINE#* }
[ "$BOOTMGR_KERNELOPTS" ] || BOOTMGR_KERNELOPTS=$CURRENTCMDLINE
sed -i -e "s|%%KERNELOPTS%%|$BOOTMGR_KERNELOPTS|g" /tmp/grub.cfg.tmp
[ "$BOOTMGR_RESCUEOPTS" ] || BOOTMGR_RESCUEOPTS="ro single $CURRENTCMDLINE"
sed -i -e "s|%%KERNELRESCUE%%|$BOOTMGR_RESCUEOPTS|g" /tmp/grub.cfg.tmp

### Lang ###
[ "$BOOTMGR_LANG" ] || BOOTMGR_LANG=en_US
sed -i "s/%%LANG%%/$BOOTMGR_LANG/g" /tmp/grub.cfg.tmp

### MENU ###
[ "$BOOTMGR_TIMEOUT" ] || BOOTMGR_TIMEOUT=5
sed -i "s/%%TIMEOUT%%/$BOOTMGR_TIMEOUT/g" /tmp/grub.cfg.tmp

[ "$BOOTMGR_STYLE" ] || BOOTMGR_STYLE="menu"
sed -i "s/%%STYLE%%/$BOOTMGR_STYLE/g" /tmp/grub.cfg.tmp


### install theme ###
if [ -d /etc/BootMgr/themes/$BOOTMGR_THEME ]; then
    rm -rf /boot/efi/EFI/$(Get_OS)/themes/BootMgr/*
    cp /etc/BootMgr/themes/$BOOTMGR_THEME/* /boot/efi/EFI/$(Get_OS)/themes/BootMgr/
else
    echo "Error, unable to find theme $BOOTMGR_THEME in /etc/BootMgr/themes/"
fi


### Windows ###
if [ "${BOOTMGR_WINDOWS^^}" == "YES" ]; then
    if [ "$BOOTMGR_WINBOOT" ]; then
        blkid --uuid $BOOTMGR_WINBOOT 2>/dev/null 1>/dev/null
        if [ $? -ne 0 ]; then
            echo "UUID disk: $BOOTMGR_WINBOOT not detected"
            WID=$(Get_Win_BootId)
        else
            WID=$BOOTMGR_WINBOOT
        fi
    else
        WID=$(Get_Win_BootId)
    fi

    if [ "$WID" == "" ]; then
        echo "Windows not found, ignoring"
    else
        sed -i -e "s/^##\(.*)$/\1/g" /tmp/grub.cfg.tmp
        sed -i -e "s/%%WINROOTID%%/$WID/g" /tmp/grub.cfg.tmp
        sed -i -e "s/^BOOTMGR_WINBOOT=*/BOOTMGR_WINBOOT=$WID/g" /tmp/grub.cfg.tmp
    fi
fi

### Signature ###
if [ "${BOOTMGR_SIGN^^}" == YES ]; then
    sed -i -e "s/%%SIGN%%/enforce/g" /tmp/grub.cfg.tmp
else
    sed -i -e "s/%%SIGN%%/no/g" /tmp/grub.cfg.tmp
fi

### Install grub.cfg ###
mv /boot/efi/EFI/$(Get_OS)/grub.cfg /boot/efi/EFI/$(Get_OS)/grub.cfg-$(date '+%Y-%M-%d')
mv /tmp/grub.cfg.tmp /boot/efi/EFI/$(Get_OS)/grub.cfg
[ -r /boot/efi/EFI/$(Get_OS)/grub.cfg.sig ] && rm /boot/efi/EFI/$(Get_OS)/grub.cfg.sig
[ -r /boot/efi/EFI/$(Get_OS)/themes/BootMgr/theme.txt.sig ] && rm /boot/efi/EFI/$(Get_OS)/themes/BootMgr/theme.txt.sig

### Signing Modules ###
if [ "$BOOTMGR_PASS" ]; then
    SPASS=$BOOTMGR_PASS
else
    SPASS=$(dd if=/dev/random bs=32 count=1 2>/dev/null | sha256sum -b | sed 's/ .*//')
fi
if [ ! "$BOOTMGR_KEY" ]; then
    sed -i -e "s|^Passphrase:.*$|Passphrase: $SPASS|g" /etc/BootMgr/security/genkey
    gpg --full-generate-key --batch /etc/BootMgr/security/genkey
fi
echo $SPASS > /dev/shm/passphrase

SKEY=$(gpg --list-keys "GRUB Signing Modules" | grep -v "[pub|uid]" | grep -v "^$" | head -1 | awk '{print $1}')

sed -i -e "s/^BOOTMGR_KEY=*$/BOOTMGR_KEY=$SKEY/"g /etc/BootMgr/BootMgr_.conf
sed -i -e "s|^BOOTMGR_PASS=*$|BOOTMGR_PASS=$SPASS|"g /etc/BootMgr/BootMgr_.conf

for TBS in $(find /boot -name "*.cfg" -or -name "*.mo" -or -name "vmlinuz*" -or -name "initramfs*" -or -name "grubenv" -or -name "theme.txt" -or -name "*.png" -or -name "*.pf2" | grep -v ".sig"); do
    if [ -r $TBS.sig ]; then
        gpg --verify --default-key $SKEY --passphrase-file /dev/shm/passphrase $TBS.sig $TBS 2>/dev/null 1>/dev/null
        if [ $? -ne 0 ]; then
            echo "Error, $TBS signature incorrect!"
        fi
    else
        gpg --pinentry-mode loopback --default-key $SKEY --detach-sign --passphrase-file /dev/shm/passphrase $TBS 2>/dev/null 1>/dev/null
    fi
done
gpg --export --default-key $SKEY --passphrase-file /dev/shm/passphrase -o /boot/efi/EFI/fedora/BootMgr.gpg 2>/dev/null 1>/dev/null
shred /dev/shm/passphrase
