#! /bin/bash
#
# script name: BootMgr
# autor: Sylvain Girod ( uubu at gmx dot fr )
# version: 0.04
# description: script for generate a simple Grub2 cfg on UEFI system
#               Including:
#                   users password
#                   Windows dual boot
#                   Module signature
#                   custom theme color and background
# Warning: only tested on Fedora!
#
# Functions:
# Next_Id: ensure each entry have a new, unique id
# Set_Kernels: Get Kernel list and update grub.cfg
# Get_OS: get linux distrib name
# Set_Root_User: Set Root password
# Set_User: Set User password



# Function: Next_Id
# Description: ensure each entry have a new, unique id
# Args:
#   $1: CurID
# on conserve le awk:
#     awk -i inplace -v ID=$(( $2 + 1 )) 'NR==1,/%%ID%%/{sub(/%%ID%%/, ID)} 1' /tmp/grub.cfg.tmp
function Next_Id() {
    echo $(($1 + 1))
}

# Function: Set_Kernels
# Description: Get Kernel list and update grub.cfg
# Args:
#   $1: grub.cfg path
function Set_Kernels() {
    KLAST=""
    KPREV=""
    KRESCUE=""
    
    for KERNEL in $(ls -1tc /boot/vmlinuz-* | grep -v rescue | head -3); do
        [ "$KLAST" ] && [ ! "$KPREV" ] && KPREV=$(basename $KERNEL)
        [ "$KLAST" ] || KLAST=$(basename $KERNEL)
    done
    
    KRESCUE=$(basename $(ls -1tc /boot/vmlinuz-* | grep rescue))
    sed -i -e "s/%%KLAST%%/${KLAST#vmlinuz-}/g" $1
    sed -i -e "s/%%KPREV%%/${KPREV#vmlinuz-}/g" $1
    sed -i -e "s/%%KRESCUE%%/${KRESCUE#vmlinuz-}/g" $1
}

# Funtion: Get_OS
# Description: get linux distrib name
# Args: None
function Get_OS() {
    [ -r /etc/ubuntu-release ] && OS=ubuntu
    [ -r /etc/debian-release ] && OS=debian
    [ -r /etc/centos-release ] && OS=centos
    [ -r /etc/fedora-release ] && OS=fedora
    echo $OS
}

# Function: Set_OS
# Description: get linux distrib name
# Args:
#   $1: grub.cfg path
function Set_OS() {
    OS=$(Get_OS)
    sed -i "s/%%OS%%/$OS/g" $1
}

# Function: Set_Root_User
# Description: Set Root password
# Args:
#   $1: grub.cfg path
function Set_Root_User() {
    if [ ! "$BOOTMGR_ROOTUSR" ]; then
        echo "Enter password for Root user, 2 times:"
        BOOTMGR_ROOTUSR=$(grub2-mkpasswd-pbkdf2 -l 512 -s 2048 -c 2048)
        BOOTMGR_ROOTUSR=${BOOTMGR_ROOTUSR##* }
    fi
    sed -i "s/%%ROOTUSR%%/password_pbkdf2 root $BOOTMGR_ROOTUSR/g" $1
    sed -i -e "s/^ROOTUSR=*$/ROOTUSR=\"password_pbkdf2 root $BOOTMGR_ROOTUSR\"/" /etc/BootMgr/BootMgr_.conf
}

# Function: Set_User
# Description: Set User password
# Args:
#   $1: grub.cfg path
function Set_User() {
    if [ ! "$BOOTMGR_SUPERUSER" ]; then
        echo "Enter UserName"; read NEWUSER;
        echo "Enter password for $NEWUSER user, 2 times:"
        BOOTMGR_SUPERUSER=$(grub2-mkpasswd-pbkdf2 -l 512 -s 2048 -c 2048)
        BOOTMGR_SUPERUSER=${BOOTMGR_SUPERUSER##* }
    fi
    sed -i "s/%%USER%%/password_pbkdf2 $NEWUSER $BOOTMGR_SUPERUSER/g" $1
    sed -i -e "s/^SUPERUSER=*$/SUPERUSER=\"password_pbkdf2 $NEWUSER $BOOTMGR_SUPERUSER\"/" /etc/BootMgr/BootMgr_.conf
    sed -i -e "s/%%WITHUSER%%/$NEWUSER/g" $1
}

function Is_Installed() {
 OK=1
 [ -d /etc/BootMgr ] || OK=0
 echo $OK
}

function Install_BootMgr() {
echo "test de dir $@"
 if [ "$(rpm -qa ImageMagick)" == "" ]; then
    echo "You must install ImageMagick, do you want install it now? [y/N]"; read answer
    if [ "${answer^^}" == "Y" ]; then dnf install ImageMagick; fi
 fi
 [ -d /etc/BootMgr ] || mkdir /etc/BootMgr
 [ -r /etc/BootMgr/BootMgr_.conf ] || cp BootMgr_.conf /etc/BootMgr/
 [ -r /etc/BootMgr/grub.template ] || cp grub.template /etc/BootMgr/
 [ -r /etc/BootMgr/theme.template ] || cp theme.template /etc/BootMgr/
 [ -d /etc/BootMgr/themes ] || cp -r themes /etc/BootMgr/
 [ -d /boot/efi/EFI/$(Get_OS)/themes ] || mkdir /boot/efi/EFI/$(Get_OS)/themes
 [ -d /boot/efi/EFI/$(Get_OS)/themes/BootMgr ] || mkdir /boot/efi/EFI/$(Get_OS)/themes/BootMgr
 cp fonts/* /boot/efi/EFI/$(Get_OS)/fonts/
}

### We only run as root ###
if [  "$(id -u)" != "0" ]; then
    echo "this script must be run as root!"
    exit -1
fi

### Checking if installed ###
if [ "$(Is_Installed)" == "0" ]; then
    echo "BootMgr seem not installed, do you want to install it [y/N]?"; read ANSWER
    if [ "${ANSWER^^}" == "Y" ]; then
        Install_BootMgr
    else
        exit -1
    fi
fi

### Copying templates ###
[ -r /tmp/grub.cfg.tmp ] && rm /tmp/grub.cfg.tmp
cp /etc/BootMgr/grub.template /tmp/grub.cfg.tmp
[ -r /tmp/theme.txt ] && rm /tmp/theme.txt
cp /etc/BootMgr/theme.template /tmp/theme.txt.tmp

### Starting changes:
. /etc/BootMgr/BootMgr_.conf

### Setting current OS (for icons):
Set_OS /tmp/grub.cfg.tmp

### Setting Users Passwords:
Set_Root_User /tmp/grub.cfg.tmp
Set_User /tmp/grub.cfg.tmp

Set_Kernels /tmp/grub.cfg.tmp

### Root part ###:
GRUBPART=$(mount -l | grep "/boot "); GRUBPART=${GRUBPART%% *}
GRUBUUID=$(lsblk -o uuid $GRUBPART | tail -1)

sed -i -e "s/%%GRUBROOT%%/UUID=$GRUBUUID/g" /tmp/grub.cfg.tmp
sed -i -e "s/%%UUIDROOT%%/UUID=$GRUBUUID/g" /tmp/grub.cfg.tmp

### Linux Root HD ###
ROOTPART=$(mount -l | grep "/ "); ROOTPART=${ROOTPART%% *}
sed -i -e "s|%%HDROOT%%|$ROOTPART|g" /tmp/grub.cfg.tmp

### Linux Options ###
CURRENTCMDLINE=$(cat /proc/cmdline); CURRENTCMDLINE=${CURRENTCMDLINE#* }
[ "$BOOTMGR_KERNELOPTS" ] || BOOTMGR_KERNELOPTS=$CURRENTCMDLINE
sed -i -e "s|%%KERNELOPTS%%|$BOOTMGR_KERNELOPTS|g" /tmp/grub.cfg.tmp
[ "$BOOTMGR_RESCUEOPTS" ] || BOOTMGR_RESCUEOPTS="ro single $CURRENTCMDLINE"
sed -i -e "s|%%KERNELRESCUE%%|$BOOTMGR_RESCUEOPTS|g" /tmp/grub.cfg.tmp

### Lang ###
[ "$BOOTMGR_LANG" ] || BOOTMGR_LANG=en_US
sed -i "s/%%LANG%%/$BOOTMGR_LANG/g" /tmp/grub.cfg.tmp

### MENU ###
[ "$BOOTMGR_TIMEOUT" ] || BOOTMGR_TIMEOUT=5
sed -i "s/%%TIMEOUT%%/$BOOTMGR_TIMEOUT/g" /tmp/grub.cfg.tmp

[ "$BOOTMGR_STYLE" ] || BOOTMGR_STYLE="menu"
sed -i "s/%%STYLE%%/$BOOTMGR_STYLE/g" /tmp/grub.cfg.tmp

### Background Image ###
[ "BOOTMGR_BACKGROUND" ] || sed -i "s/%%BACKGROUNDIMG%%//g" /tmp/theme.txt.tmp
#[ "BACKCOLOR" ] || sed -i -e "s/^desktop-color=*$/desktop-color=\"$BACKCOLOR\"/g" /tmp/theme.txt.tmp
#[ "TEXTCOLOR" ]
#[ 
#message-color: "#aaa"
#message-bg-color: "#000"
#text_color = "#000"
#fg_color = "#aaa"
#bg_color = "#999"
#border_color = "#fff"

#title-text: "Uubu.fr Boot Menu"
### Colors ###
[ "$BOOTMGR_BOXCOLOR" ] || BOOTMGR_BOXCOLOR="116 123 209"

THEMEDIR=$(echo $BOOTMGR_BOXCOLOR | tr \  \- )
[ -d /boot/efi/EFI/$(Get_OS)/themes/BootMgr/$THEMEDIR ] || mkdir /boot/efi/EFI/$(Get_OS)/themes/BootMgr/$THEMEDIR
mkdir /tmp/BootMgr/
read -r R G B <<< $(echo $BOOTMGR_BOXCOLOR)
for image in $(ls /etc/BootMgr/themes/template/); do
    convert /etc/BootMgr/themes/template/$image -colorspace srgb -fuzz 20% -fill "rgb($R,$G,$B)" -opaque 'rgb(0,0,0)' /tmp/BootMgr/$image
done

sed -i -e "s/%%THEME%%/$THEMEDIR/g" /tmp/theme.txt.tmp

### install theme ###
rm -rf /boot/efi/EFI/$(Get_OS)/themes/BootMgr/*
cp /tmp/BootMgr/* /boot/efi/EFI/$(Get_OS)/themes/BootMgr/$THEMEDIR/
cp /tmp/theme.txt.tmp /boot/efi/EFI/$(Get_OS)/themes/BootMgr/theme.txt
cp -r /etc/BootMgr/icons /boot/efi/EFI/$(Get_OS)/themes/BootMgr/$THEMEDIR/


### Windows ###


### Windows Root ID ###


### Signature ###

### Install grub.cfg ###


### Sign data ###

### Suppression des fichiers templates ###
#rm /tmp/grub.cfg.tmp
#rm /tmp/theme.txt.tmp
#rm -rf /tmp/BootMgr
